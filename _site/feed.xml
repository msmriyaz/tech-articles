<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="http://localhost:4000/tech-articles/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/tech-articles/" rel="alternate" type="text/html" /><updated>2025-04-15T23:09:51+12:00</updated><id>http://localhost:4000/tech-articles/feed.xml</id><title type="html">My Tech Articles</title><subtitle>A collection of my technical writings.</subtitle><entry><title type="html">My First Tech Article</title><link href="http://localhost:4000/tech-articles/2024/10/28/my-first-post.html" rel="alternate" type="text/html" title="My First Tech Article" /><published>2024-10-28T23:00:00+13:00</published><updated>2024-10-28T23:00:00+13:00</updated><id>http://localhost:4000/tech-articles/2024/10/28/my-first-post</id><content type="html" xml:base="http://localhost:4000/tech-articles/2024/10/28/my-first-post.html"><![CDATA[<h1 id="introduction">Introduction</h1>

<p>Welcome to my first tech article! In this post, I’ll be discussing the basics of Jekyll and how to style it to look like the Google ADK documentation.</p>

<h2 id="setting-up-the-layout">Setting up the Layout</h2>

<p>We’ll start by creating a custom layout that includes a sidebar for navigation and a main content area.</p>

<h2 id="styling-with-css">Styling with CSS</h2>

<p>Next, we’ll use CSS to style the layout and make it visually appealing.</p>

<h2 id="sample-code">Sample Code</h2>

<p>Here’s an example of some code:</p>

<p>```python
def hello_world():
    print(“Hello, world!”)</p>

<p>hello_world()</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Introduction]]></summary></entry><entry><title type="html">My First Tech Article</title><link href="http://localhost:4000/tech-articles/2024/04/15/my-first-tech-article.html" rel="alternate" type="text/html" title="My First Tech Article" /><published>2024-04-15T00:00:00+12:00</published><updated>2024-04-15T00:00:00+12:00</updated><id>http://localhost:4000/tech-articles/2024/04/15/my-first-tech-article</id><content type="html" xml:base="http://localhost:4000/tech-articles/2024/04/15/my-first-tech-article.html"><![CDATA[<h2 id="introduction">Introduction</h2>

<p>Welcome to the first article in our technical series. This article will guide you through the basics of working with technical documentation and provide a foundation for more advanced topics.</p>

<h2 id="what-youll-learn">What You’ll Learn</h2>

<p>In this article, you’ll learn:</p>

<ul>
  <li>Basic structure of technical documentation</li>
  <li>How to format code examples</li>
  <li>Best practices for organizing information</li>
</ul>

<h2 id="getting-started-with-documentation">Getting Started with Documentation</h2>

<p>Good documentation is essential for any technical project. It helps users understand how to use your software, guides contributors who want to help improve it, and serves as a reference for your future self.</p>

<h3 id="structure-and-organization">Structure and Organization</h3>

<p>Well-structured documentation follows a logical progression:</p>

<ol>
  <li>Overview or introduction</li>
  <li>Installation or setup</li>
  <li>Basic concepts</li>
  <li>Detailed functionality</li>
  <li>Advanced topics</li>
  <li>Troubleshooting</li>
</ol>

<h3 id="code-examples">Code Examples</h3>

<p>Including code examples makes your documentation more practical. Here’s a simple example:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// A simple function to add two numbers</span>
<span class="kd">function</span> <span class="nf">add</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// Usage</span>
<span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nf">add</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span> <span class="c1">// Outputs: 8</span>
</code></pre></div></div>

<h2 id="best-practices">Best Practices</h2>

<p>Follow these best practices when writing technical documentation:</p>

<ul>
  <li><strong>Be concise</strong> - Use clear, simple language</li>
  <li><strong>Use examples</strong> - Demonstrate concepts with practical examples</li>
  <li><strong>Keep it updated</strong> - Outdated documentation can cause more harm than good</li>
  <li><strong>Include diagrams</strong> - Visual aids help explain complex concepts</li>
  <li><strong>Link related topics</strong> - Help readers navigate between related articles</li>
</ul>

<h2 id="conclusion">Conclusion</h2>

<p>This article covered the basics of creating effective technical documentation. In our next article, we’ll dive deeper into specific documentation formats and tools that can streamline your workflow.</p>

<h2 id="further-reading">Further Reading</h2>

<ul>
  <li><a href="https://example.com/tech-writing">Technical Writing Best Practices</a></li>
  <li><a href="https://example.com/doc-tools">Documentation Tools and Frameworks</a></li>
  <li><a href="https://example.com/info-arch">Information Architecture for Documentation</a></li>
</ul>]]></content><author><name></name></author><summary type="html"><![CDATA[An introduction to our technical article series with sample content]]></summary></entry></feed>